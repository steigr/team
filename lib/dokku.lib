require team
require coreos
require serf
require docker
require random
require zookeeper
require ssh

dokku_update() {
  _dokku_image_present || _dokku_build_image
  dokku_stop
  dokku_install
}

dokku_install() {
  _dokku_unit_write
  dokku_start
}

dokku_start() {
  _coreos_start dokku
}

dokku_stop() {
  _coreos_stop dokku
}

dokku_env() {
  _dokku_env
}

dokku_run() {
  $(_docker) run --rm --env-file=$(_dokku_env_file) -v $(_dokku_docker_socket):$(_dokku_docker_socket) -v $(_dokku_home):$(_dokku_home) $(_dokku_image_name) /start
}

dokku_ip() {
  serf_query -format=json dokku-ip | _serf_query_json_values | head -1
}

dokku_local-ip() {
  _docker_ip $(_dokku_container_name)
}

dokku_id() {
  _coreos_active docker || exit 0
  _docker_ids_by_image "dokku" | head -1
}

dokku_rm() {
  for id in $(_docker_ids_by_image $(_dokku_image_name)); do
    docker rm $id
  done
}

dokku_exec() {
  docker exec $(dokku_id) $*
}

dokku_clean() {
  _coreos_remove_unit $(_coreos unit dokku)
}

dokku_service-path() {
  _dokku_nerve_ssh_path
}

dokku_frontend-port() {
  dokku_backend-port
}

dokku_backend-name() {
  _dokku_container_name
}

dokku_backend-ip() {
  dokku_ip
}

dokku_backend-port() {
  echo 22
}

dokku_running() {
  [[ "$(dokku_id 2>/dev/null)" ]] && true || false
}

dokku_logs() {
  $(_docker) logs $1 $(dokku_id)
}

dokku_() {
  $(_docker) exec -ti $(dokku_id) /bin/bash -l $arg $*
}
_dokku_image_present() {
  docker images | grep ^dokku >/dev/null 2>/dev/null
}
_dokku_container_name() {
  _docker_name_by_id $(dokku_id) 2>/dev/null
}

_dokku_image_name() {
  echo "dokku"
}

_dokku_stop_container() {
  coreos_stop $(_dokku_container_name)
}

_dokku_start_container() {
  _dokku_unit_write $(coreos_unit dokku)
  _coreos_start $(_dokku_container_name)
}

_dokku_authorized_keys() {
  echo "/home/core/.ssh/authorized_keys"
}

_dokku_graph_dir() {
  echo "/var/lib/docker"
}

_dokku_docker_socket() {
  echo "/var/run/docker.sock"
}

_dokku_base_container() {
  _dokku_container_name
}

_dokku_docker_command() {
  echo "$(_docker) run -v $(_dokku_authorized_keys):$(_dokku_authorized_keys) -v $(_dokku_docker_socket):$(_dokku_docker_socket) $* $(_dokku_image_name)"
}

_dokku_build_image() {
  _dokku_build_base_image
  _dokku_build_runtime_image
}

_dokku_build_base_image() {
  if [[ -z "$($(_docker) images 2>/dev/null | grep "^dokku-base ")" ]]; then
    temp_dir=$(_dokku_image_build_dir)
    docker build -t $(_dokku_image_name) $temp_dir
    rm -r $temp_dir
  fi
}

_dokku_build_runtime_image() {
  set -x
  set -e
  _dokku_bootstrap_commands | while read cmd; do
    name=$(_random 8)
    $(_dokku_docker_command -t --name=$name --entrypoint=/bin/sh -v $(_dokku_home):$(_dokku_home)_host) -c "$cmd"
    iid=$(docker commit $name)
    docker tag -f $iid $(_dokku_image_name)
    docker rm $name
  done
  set +e
}

_dokku_image_build_dir() {
  temp_dir=$(mktemp -d /tmp/XXXXXX)
  _dokku_image_write_file $temp_dir Dockerfile
  _dokku_image_write_file $temp_dir files/$(_dokku_entrypoint_file)
  _dokku_image_write_file $temp_dir files/app/Procfile
  _dokku_image_write_file $temp_dir files/bin/default-ip
  _dokku_image_write_file $temp_dir files/bin/nerve-config
  _dokku_image_write_file $temp_dir files/bin/prepare-sshd
  echo $temp_dir
}

_dokku_bootstrap_commands() {
  cat<<EO_DOKKU_BOOTSTRAP_COMMANDS
curl -fLo bootstrap.sh https://raw.github.com/progrium/dokku/master/bootstrap.sh
sed -i -e 's:"linux-image-extra-\$(uname -r)"::' bootstrap.sh
DOKKU_BRANCH=master bash bootstrap.sh || true
groupmod -g $(stat -c %g /run/docker.sock) docker
tail -1 $(_dokku_authorized_keys) | sshcommand acl-add dokku team
rsync -arv $(_dokku_home) $(_dokku_home)_host
rm bootstrap.sh || true
rm -rf /root/dokku /tmp/* || true
EO_DOKKU_BOOTSTRAP_COMMANDS
}

_dokku_image_write_file() {
  target="$1/$2"
  mkdir -p "$(dirname $target)"
  case "$2" in
    Dockerfile)
      cat <<EO_DOKKU_IMAGE_Dockerfile | tee $target >/dev/null
FROM ubuntu:latest
MAINTAINER Mathias Kaufmann <me@stei.gr>
RUN export DEBIAN_FRONTEND=noninteractive \
 && ping -c1 de.archive.ubuntu.com \
 && sed -i -e "s@http://archive@http://de.archive@g" /etc/apt/sources.list \
 && apt-get update \
 && apt-get dist-upgrade -y \
 && apt-get autoremove -y \
 && apt-get install curl openssh-server openssh-client apt-transport-https ca-certificates ruby ruby-dev devscripts haproxy -y \
 && apt-get clean \
 && gem install nerve foreman --no-ri --no-rdoc \
 && test -f /sbin/modprobe.real || mv /sbin/modprobe /sbin/modprobe.real \
 && test -f /sbin/modprobe      || ln /bin/true /sbin/modprobe \
 && echo dokku dokku/vhost_enable boolean false | debconf-set-selections \
 && echo dokku dokku/web_config boolean false | debconf-set-selections \
 && echo dokku dokku/hostname string dokku.me | debconf-set-selections \
 && echo dokku dokku/key_file string /root/dokku_id.pub | debconf-set-selections \
 && echo debconf debconf/frontend string noninteractive | debconf-set-selections
ENTRYPOINT ["/$(_dokku_entrypoint_file)"]
ADD files /
EO_DOKKU_IMAGE_Dockerfile
    ;;
    files/start)
      cat <<'EO_DOKKU_IMAGE_files_start' | tee $target >/dev/null
#!/bin/bash

/bin/nerve-config
/bin/prepare-sshd

export HOME=/app
cd /app

case "$(basename $0)" in
  start)
    command="foreman start --procfile=Procfile $@"
    ;;
  *)
    command="$@"
    ;;
esac

if test -z "$command"; then
  echo "Missing command ($@)"
  exit 1
fi

exec $(eval echo ${command})
EO_DOKKU_IMAGE_files_start
      chmod +x $target
    ;;
    files/app/Procfile)
      cat <<EO_DOKKU_IMAGE_files_app_Procfile | tee $target >/dev/null
ssh: /usr/sbin/sshd -D -f /etc/ssh/sshd_config
nerve: nerve -c /etc/nerve/nerve.json
EO_DOKKU_IMAGE_files_app_Procfile
    ;;
    files/bin/default-ip)
      cat <<'EO_DOKKU_IMAGE_files_bin_default_ip' | tee $target >/dev/null
#!/bin/sh
ip -4 -o route get 8.8.8.8 | awk '{print $7}'
EO_DOKKU_IMAGE_files_bin_default_ip
      chmod +x $target
    ;;
    files/bin/nerve-config)
      cat <<'EO_DOKKU_IMAGE_files_bin_nerve_config' | tee $target >/dev/null
#!/bin/bash
mkdir -p /etc/nerve 2>/dev/null >/dev/null || true
host=$(default-ip)
zk_host=$ZK_HOST
zk_path=$ZK_PATH
instance_id=$(hostname)
cat<<EO_NERVE_CONFIG > /etc/nerve/nerve.json
{
  "instance_id":"$instance_id",
  "services":{
    "ssh":{
      "host": "$host",
      "port":22,
      "reporter_type":"zookeeper",
      "zk_hosts":[
        "$zk_host:2181"
      ],
      "zk_path":"$zk_path",
      "check_interval":2,
      "checks":[
        {
          "type":"tcp",
          "timeout":0.2,
          "rise":3,
          "fall":2
        }
      ]
    }
  }
}
EO_NERVE_CONFIG
EO_DOKKU_IMAGE_files_bin_nerve_config
      chmod +x $target
    ;;
    files/bin/prepare-sshd)
      cat <<'EO_DOKKU_IMAGE_files_bin_prepare_sshd' | tee $target >/dev/null]
#!/bin/bash
mkdir -p /root/.ssh /var/run/sshd 2>/dev/null >/dev/null || true
touch /root/.ssh/authorized_keys
grep "$DOKKU_ROOT_KEY" /root/.ssh/authorized_keys >/dev/null || echo "$DOKKU_ROOT_KEY" >> /root/.ssh/authorized_keys
EO_DOKKU_IMAGE_files_bin_prepare_sshd
      chmod +x $target
    ;;
  esac
}

_dokku_unit_write() {
  _coreos_write_unit $(coreos_unit dokku) <<EO_DOKKU_UNIT
[Unit]
Description=Dokku PaaS
Requires=flanneld.service
After=flanneld.service
[Service]
Restart=always
ExecStartPre=-$(_team) dokku rm
ExecStartPre=$(_team) dokku env
ExecStart=$(_team) dokku run
ExecStop=$(_team) dokku halt
EO_DOKKU_UNIT
}

_dokku_entrypoint_file() {
  echo "start"
}

_dokku_home() {
  echo "/home/dokku"
}

_dokku_apps() {
  find $(_dokku_home) -mindepth 1 -maxdepth 1 -type d -not -name '.*' | cut -f4 -d/
}

_dokku_env() {
  env_file=$(_dokku_env_file)
  mkdir -p $(dirname $env_file)
  cat <<EO_DOKKU_ENV > $env_file
ZK_HOST=$(zookeeper_ip)
ZK_PATH=$(_dokku_nerve_ssh_path)
DOKKU_ROOT_KEY=$(ssh_authorized-keys | head -1)
EO_DOKKU_ENV
}

_dokku_env_file() {
  echo "/run/dokku/env"
}

_dokku_nerve_ssh_path() {
  echo "/team/dokku/ssh/services"
}

_dokku_public_address() {
  address=$(public_ipv4_address)
  [[ -z "$address" ]] && address=$(private_ipv4_address)
  echo $address
}