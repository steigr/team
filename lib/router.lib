require config
require coreos
require zookeeper
require network
require jq

router_install() {
  _router_unit
}

router_start() {
  $(_docker) --rm -l "router=$1" -v $(_router_config_file $1):/etc/synapse/synapse.json $(_router_binding $1) $(_router_image)
  _coreos_start router@$1
}

router_stop() {
  _coreos_stop router@$1 
}

router_id() {
  $(_docker) ps --filter label=load-balancer=$1 -q
}

router_prepare() {
  _router_unit_present || _router_unit
  _router_config_write $1
  $(_docker) pull $(_router_image)
}

_router_unit() {
  _coreos_write_unit $(_coreos_unit router@) <<EO_ROUTER_UNIT
[Unit]
Description=Service Router for %i
After=docker.service flanneld.service
Requires=docker.service flanneld.service
[Servie]
ExecStartPre=$(_team) router prepare %i
ExecStart=$(_team) router start %i
ExecStop=$(_team) router stop %i
EO_ROUTER_UNIT
}

_router_config_file() {
  _volatile_file router $1.json
}

_router_unit_present() {
  systemctl cat router@ >dev/null 2>/dev/null
}

_router_image() {
  echo "steigr/synapse:latest"
}

_router_config() {
  cat $(_router_config_file $1) 2>/dev/null
}

_router_binding() {
  _router_exposed_ports $1 | while read port; do
    echo "-p $(_exposed_address):$(port):$(port)"
  done
}

_router_exposed_ports() {
  _router_config $1 | _jq ".services.$1.haproxy.port" | grep -v "^null$"
}

_router_config_write() {
  service_path=$($(_team) $1 service-path)
  frontend_port=$($(_team) $1 frontend-port)
  zookeeper_ip=$(zookeeper_ip)
  zookeeper_port=$(zookeeper_port)
  if $(_team) $1 running; then
    container_name=$($(_team) $1 backend-name)
    container_ip=$($(_team) $1 backend-ip)
    container_port=$($(_team) $1 backend-port)
    default_server_entry="\"default_servers\":[{\"name\":\"$container_name\",\"host\":\"$container_ip\":\"port\":\"$container_port\"}],\n"
  fi
  cat <<EO_ROUTER_CONFIG | tee $(_router_config_file $1) >/dev/null
{
  "services":{
    "$1":{
      $default_server_entry"discovery":{
        "method":"zookeeper",
        "path":"$service_path",
        "hosts":[
          "$zookeeper_ip:$zookeeper_port"
        ]
      },
      "haproxy":{
        "port":$frontend_port,
        "server_options":"check inter 2s rise 3 fall 2",
        "listen":[
          "mode tcp"
        ]
      }
    }
  },
  "haproxy":{
    "reload_command":"service haproxy reload",
    "config_file_path":"/etc/haproxy/haproxy.cfg",
    "socket_file_path":"/tmp/haproxy.sock",
    "do_writes":true,
    "do_reloads":true,
    "do_socket":true,
    "bind_address":"0.0.0.0",
    "global":[
      "daemon",
      "user root",
      "group root",
      "maxconn 4096",
      "log 127.0.0.1 local0",
      "log 127.0.0.1 local1 notice",
      "stats socket /tmp/haproxy.sock mode 666 level admin"
    ],
    "defaults":[
      "log global",
      "option dontlognull",
      "maxconn 2000",
      "retries 3",
      "timeout server 1m",
      "option redispatch",
      "balance roundrobin"
    ]
  }
}
EO_ROUTER_CONFIG
}