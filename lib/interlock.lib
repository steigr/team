. $TEAM_LIB/team.lib
. $TEAM_LIB/coreos.lib
. $TEAM_LIB/network.lib


interlock_install() {
  _interlock_write_unit $(coreos_unit interlock)
}

interlock_update() {
  interlock_stop
  interlock_install
  interlock_start  
}

interlock_start() {
  coreos_start interlock.service
}

interlock_stop() {
  coreos_stop interlock.service
}

interlock_environment() {
  env_file=${1:-$(_interlock_environment_file)}
  _interlock_write_environment $env_file
  cat $env_file
}

_interlock_test() {
  [[ -z "$(public_ipv4_address)" ]] && exit 1 
}

_interlock_write_unit() {
  cat<<EO_INTERLOCK_UNIT | tee $1 >/dev/null
[Unit]
Description=Interlock Load-Balancer
Requires=early-docker.service
After=early-docker.service
[Service]
Restart=always
Environment=$(coreos_early_docker_env)
ExecStartPre=-/usr/bin/docker rm $(_interlock_container_name)
ExecStartPre=-/usr/bin/mkdir -p $(_interlock_ssl_dir)
ExecStartPre=$TEAM interlock environment $(_interlock_environment_file)
ExecStartPre=$TEAM ssl populate-interlock
ExecStart=/bin/sh -c '. $(_interlock_environment_file); docker run -v $(_interlock_ssl_dir):/ssl --env-file=$(_interlock_environment_file) --net=host --rm --name=$(_interlock_container_name) ehazlett/interlock --swarm-url \$INTERLOCK_SWARM_URL --plugin \$INTERLOCK_PLUGIN start \$INTERLOCK_PLUGIN_ARGS'
ExecStop=-/usr/bin/docker stop $(_interlock_container_name)
EO_INTERLOCK_UNIT
  coreos_init reload
}

_interlock_write_environment() {
  mkdir -p $(dirname $1)
  cat<<EO_INTERLOCK_ENV | tee $1
INTERLOCK_SWARM_URL=tcp://$(private_ipv4_address):2375
INTERLOCK_PLUGIN=$(_interlock_plugin_name)
INTERLOCK_PLUGIN_ARGS=$(_interlock_plugin_args)
HAPROXY_PORT=80
HAPROXY_SSL_PORT=443
HAPROXY_SSL_CERT=$(_interlock_balancer_cert)
HAPROXY_SSL_OPTS=crt /ssl no-sslv3 ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS
EO_INTERLOCK_ENV
}

_interlock_plugin_name() {
  echo "haproxy"
}

_interlock_plugin_args() {
  echo ""
}

_interlock_environment_file() {
  echo "/run/interlock/env"
}

_interlock_ssl_dir() {
  echo "/run/interlock/ssl"
}

_interlock_container_name() {
  echo "interlock"
}

_interlock_balancer_cert() {
  echo "/ssl/interlock.pem"
}

_interlock_host_balancer_cert() {
  echo "/run/interlock/$(_interlock_balancer_cert)"
}

