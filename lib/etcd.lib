require serf
require network
require coreos
require config

etcd_update() {
  etcd_stop
  etcd_install
}

etcd_install() {
  _etcd_write_unit_dropin
  etcd_start
}

etcd_start() {
  coreos_start etcd2
}

etcd_stop() {
  coreos_stop etcd2
}

etcd_local-token() {
  echo "$(_etcd_token_var)$(_etcd_local_token)"
}

etcd_create-token() {
  token=$(curl -fS "https://discovery.etcd.io/new?size=1")
  _etcd_write_token $token
  echo $token
}

etcd_token() {
  TIMEOUT=$(_etcd_token_discovery_timeout) _serf_query_json -tag etcd-token=true etcd-token | _serf_query_json_values | head -1
}

etcd_clean() {
  _coreos_remove_unit $(_etcd_unit_dropin_file)
}

etcd_is-single() {
  [[ "$(etcdctl member list | wc -l)" = "1" ]] && true || false
}

etcd_is-master() {
  [[ "$(serf_tags | grep 'etcd-master' 2>/dev/null)" ]] && true || false
}

etcd_is-member() {
  test -d /var/lib/etcd2/member
}

etcd_is-proxy() {
  test -d /var/lib/etcd2/proxy 
}

etcd_cluster-resize() {
  etcd_is-master || exit
  _etcd_receive_new_members | while read member; do
    name=$(echo $member | awk -F@ '{print $3}')
    peerURL=$(echo $member | awk -F@ '{print $4}')
    _etcd_add-member $name $peerURL
  done
}

etcd_master-election() {
  if etcd_is-single; then
    serf_tag etcd-master=true >/dev/null && exit 0 || exit 1
  fi
  if etcd_is-master; then
    _master=$(_etcd_receive_new_master)
    _master_name=$(echo $_master | awk -F@ '{print $3}')
    serf_event etcd-elect-master $_master_name
    exit
  fi
}

etcd_become-master() {
  read payload
  [[ "$payload" = "$(etcd_name)" ]] && serf_tag etcd-master=true >/dev/null 2>/dev/null
}

etcd_name() {
  addresses="$(private_ipv4_addresses) $(public_ipv4_addresses)"
  etcdctl member list | while read member; do
    for address in $addresses; do
      if [[ "$(echo $member | grep $address 2>/dev/null)" ]]; then
        nn=$(echo $member | awk -F'name=' '{print $2}' | cut -f1 -d' ')
        if [[ "$nn" ]]; then
          echo $nn
          exit
        fi
      fi
    done
  done
}

etcd_member-name() {
  etcd_is-member && etcd_name
}

etcd_proxy-name() {
  etcd_is-proxy && etcd_name
}

etcd_stand-for-member-election() {
  etcd_is-member || \
  _etcd_election_standing
}

etcd_stand-for-master-election() {
  etcd_is-master || \
  _etcd_election_standing
}

etcd_peer-url() {
  echo -n "http://$(private_ipv4_address):2379"
}

etcd_master() {
  serf_nodes -tag etcd-master=true | grep -v "^$" | sort -n | head -1
}

_etcd_add-member() {
  etcdctl member add $1 $2
}

_etcd_ballot() {
  TIMEOUT=$(_etcd_election_timeout) _serf_query_json etcd-${1}-election \
  | _jq ' .Responses | to_entries | map(.value) | join("\n") ' \
  | xargs echo -e \
  | awk -F"^stand@" '{print $2}' \
  | sort -n \
  | tail -$2    
}

_etcd_receive_new_master() {
  _etcd_ballot master 1
}

_etcd_receive_new_members() {
  _etcd_ballot member 2
}

_etcd_election_standing() {
  name=$(etcd_name)
  rating=$(cat /proc/uptime | awk '{print $2}')_$name
  peer_url=$(etcd_peer-url)
  echo -n "stand@$rating@$name@$peer_url"
}

_etcd_write_unit_dropin() {
  dropin_file=$(_etcd_unit_dropin_file)
  mkdir -p $(dirname $dropin_file)
  _coreos_write_unit $dropin_file <<EO_ETCD_UNIT_DROPIN
[Service]
Environment="ETCD_NAME=$(_etcd_nodename)"
Environment="ETCD_DISCOVERY=$(_etcd_token)"
Environment="ETCD_ADVERTISE_CLIENT_URLS=http://$(private_ipv4_address):2379"
Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$(private_ipv4_address):2380"
Environment="ETCD_LISTEN_CLIENT_URLS=$(etcd_peer-url),http://127.0.0.1:2379,http://$(private_ipv4_address):4001,http://127.0.0.1:4001"
Environment="ETCD_LISTEN_PEERS_URLS=http://$(private_ipv4_address):2380,http://127.0.0.1:2380,http://127.0.0.1:7001"
EO_ETCD_UNIT_DROPIN
}

_etcd_write_token() {
  mkdir -p $(dirname $(_etcd_token_file)) >/dev/null 
  echo $1 | tee $(_etcd_token_file)
}

_etcd_local_token() {
  test -f $(_etcd_token_file) && cat $(_etcd_token_file)
}

_etcd_token_file() {
  echo "/run/etcd/token"
}

_etcd_token_var() {
  echo "ETCD_TOKEN="
}

_etcd_unit_dropin_file() {
  echo "/run/systemd/system/etcd2.service.d/20-cloudinit.conf"
}

_etcd_nodename() {
  serf_node-name
}

_etcd_token() {
  token=$(_etcd_local_token)
  test -z $token && token=$(etcd_token)
  test -z $token && token=$(etcd_create-token)
  echo $token
}

_etcd_set() {
  etcdctl set $1 $2
}

_etcd_get() {
  etcdctl get $1 2>/dev/null || false
}

_etcd_token_discovery_timeout() {
  _defaults serf_query_timeout
}

_etcd_election_timeout() {
  echo "5s"
}