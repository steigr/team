require platform
require http
require coreos
require team
require network

set -x

serf_version() {
  version=$(_serf_bin_version)
  [[ -z "$version" ]] && version=$(_serf_default_version)
  echo $version
}

serf_update() {
  serf_stop
  serf_install
}

serf_install() {
  _serf_download
  _serf_write_unit
  serf_start
}

serf_start() {
  _coreos_start serf
}

serf_stop() {
  _coreos_stop serf
}

serf_config() {
  _serf_write_config
}

serf_loglevel() {
  echo "debug"
}

serf_handler() {
  echo "$TEAM"
}

serf_bin() {
  _serf
}

serf_event() {
  $(_serf) event $*
}

serf_nodes() {
  $(_serf) members -status=alive $* 2>/dev/null
}

serf_count-nodes() {
  serf_nodes | grep -v "^$" | wc -l
}

serf_set() {
  for tag in $*; do
    $(_serf) tags -set $tag
  done
}

serf_unset() {
  for tag in $*; do
    $(_serf) tags -delete $tag
  done
}

serf_query() {
  _serf_query $*
}

serf_timeout() {
  echo "1s"
}

serf_check() {
  _serf_check "swarm local-token" swarm-token 
  _serf_check "swarm id" swarm
  _serf_check "interlock id" interlock
  _serf_check "zookeeper id" zookeeper
  _serf_check "registry id" registry
}

serf_cluster() {
  _domainname | sed -e 's@\.@_@g'
}

serf_node-name() {
  _hostname
}

_serf_download() {
  test -x $(_serf) -a -f $(_serf) && exit
  _serf_zip=$(_http_get $(_serf_url) $(mktemp /tmp/XXXX.zip).zip)
  unzip -o $(dirname $(_serf)) $_serf_zip >/dev/null
  rm $_serf_zip
  chmod +x $(_serf)
}

_serf_write_unit() {
  _coreos_write_unit $(coreos_unit serf) <<EO_SERF_UNIT
[Unit]
Description=Serf Cluster Discovery and Event Processing
[Service]
Restart=always
ExecStartPre=$TEAM serf config
ExecStart=$(_serf) agent -config-file=$(_serf_config_file)
EO_SERF_UNIT
}

_serf_write_config() {
  mkdir -p $(dirname $(_serf_config_file))
  cat <<EO_SERF_CONFIG | tee $(_serf_config_file) >/dev/null
{
  "discover":"$(serf_cluster)",
  "tags":{
    "coreos":"true"
  },
  "node_name":"$(serf_node-name)",
  "snapshot_path":"$(_serf_snapshot_file)",
  "rejoin_after_leave":true,
  "disable_name_resolution":true,
  "event_handlers":[
    "$(serf_handler)"
  ],
  "log_level":"$(serf_loglevel)"
}
EO_SERF_CONFIG
}

_serf_config_file() {
  echo "/run/serf/config"
}

_serf_url() {
  echo "https://dl.bintray.com/mitchellh/serf/$(serf_version)_$(platform)_amd64.zip"
}

_serf_bin_version() {
  $(_serf) version | grep -E "Serf v([0-9]+\.?)+" | awk -F' v' '{print $2}'
}

_serf_default_version() {
  echo "0.6.4"
}

_serf() {
  result=$(_serf_local_bin)
  [[ -z "$result" ]] && result=$(_serf_default_bin)
  echo $result
}

_serf_default_bin() {
  echo "$PREFIX/bin/serf"
}

_serf_local_bin() {
  serf_bin=$(which serf 2>/dev/null)
  [[ -z "$serf_bin" ]] || return
  [[ -f "$serf_bin" ]] || return
  [[ -x "$serf_bin" ]] || return
  echo $serf_bin
}

_serf_snapshot_file() {
  _sf="/run/serf/snapshot"
  mkdir -p $(dirname $sf)
  echo $sf
}

_serf_check() {
  result=$(/bin/sh -c "$TEAM $1" )
  [[ "x" = "x$result" ]] && $TEAM serf unset $2 || $TEAM serf set $2=true
}

_serf_query() {
  $(_serf) query -timeout=${TIMEOUT:-$(serf_timeout)} $*
}

_serf_query_filter() {
  cat | awk -F$1 '{print $2}' | awk '{print $1}' | grep -v "^$"
}