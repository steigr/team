require team
require serf
require network
require coreos

registry_install() {
  registry_stop
  _registry_write_unit $(coreos_unit registry)
  registry_start
}

registry_start() {
  coreos_start registry 
}

registry_stop() {
  coreos_stop registry 
}

registry_ip() {
  if [[ $(_registry_ip_file) ]]; then
    cat $(_registry_ip_file)
  else
    test "$(registry_id)" && registry_write-ip
  fi
}

registry_cluster-ip() {
  TIMEOUT=2s _serf_query registry-ip | _serf_query_filter $(_registry_ip_var) | head -n1
}

registry_env() {
  mkdir -p $(dirname $(_registry_env_file)) >/dev/null
  cat<<EO_REGISTRY_ENVIRONMENT | tee $(_registry_env_file) >/dev/null
REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=$(_registry_store)
INTERLOCK_DATA='{"ssl_only":true}'
EO_REGISTRY_ENVIRONMENT
}

registry_write-ip() {
  out="$(_registry_ip_var)$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(_registry_id -a | head -1))"
  file=${1:-$(_registry_ip_file)}
  mkdir -p $(dirname $file)
  echo $out | tee $file
}

registry_halt() {
  for id in $(_registry_id); do
    /usr/bin/docker stop $id || true
  done
}

registry_remove() {
  for id in $(_registry_id -a); do
    /usr/bin/docker rm $id || true
  done
}

_registry_hostname() {
  echo "registry.$(domainname)"
}

_registry_write_unit() {
  cat<<EO_REGISTRY_UNIT | tee $1 >/dev/null
[Unit]
Description=Docker Distribution Registry
[Service]
ExecStartPre=-$TEAM registry remove
ExecStartPre=$TEAM registry env
ExecStart=/usr/bin/docker run --rm -P --env-file=$(_registry_env_file) -v $(_registry_store):$(_registry_store) --hostname=$(_registry_hostname) registry:2
ExecStop=-$TEAM registry halt
EO_REGISTRY_UNIT
  coreos_init reload
}

_registry_ip_file() {
  echo "/run/registry/ip"
}

_registry_ip_var() {
  echo "REGISTRY_IP="
}

_registry_store() {
  echo "/var/lib/registry"
}

_registry_env_file() {
  echo "/run/registry/env"
}

_registry_id() {
  docker ps ${1} | awk '{print $1 "  " $2}' | grep " registry:2" | awk '{print $1}'
}